#
# DO NOT EDIT
# This file is auto-generated by build utility
#
# Module Name:
#
#   GNUmakefile
#
# Abstract:
#
#   Auto-generated makefile for building modules, libraries or platform
#
    

#
# Platform Macro Definition
#
PLATFORM_NAME = MdeModule
PLATFORM_GUID = 587CE499-6CBE-43cd-94E2-186218569478
PLATFORM_VERSION = 0.98
PLATFORM_RELATIVE_DIR = MdeModulePkg
PLATFORM_DIR = /root/next-loader/src/edk2/UDK2018/MyWorkSpace/MdeModulePkg
PLATFORM_OUTPUT_DIR = Build/MdeModule

#
# Module Macro Definition
#
MODULE_NAME = ArmMmuBaseLib
MODULE_GUID = da8f0232-fb14-42f0-922c-63104d2c70bd
MODULE_NAME_GUID = ArmMmuBaseLib
MODULE_VERSION = 1.0
MODULE_TYPE = BASE
MODULE_FILE = ArmMmuBaseLib.inf
MODULE_FILE_BASE_NAME = ArmMmuBaseLib
BASE_NAME = $(MODULE_NAME)
MODULE_RELATIVE_DIR = ArmPkg/Library/ArmMmuLib
PACKAGE_RELATIVE_DIR = Library/ArmMmuLib
MODULE_DIR = /root/next-loader/src/edk2/UDK2018/MyWorkSpace/ArmPkg/Library/ArmMmuLib
FFS_OUTPUT_DIR = 

MODULE_ENTRY_POINT = _ModuleEntryPoint
ARCH_ENTRY_POINT = _ModuleEntryPoint
IMAGE_ENTRY_POINT = _ModuleEntryPoint

INF_VERSION = 0x00010005
BASE_NAME = ArmMmuBaseLib
FILE_GUID = da8f0232-fb14-42f0-922c-63104d2c70bd
MODULE_TYPE = BASE
VERSION_STRING = 1.0

#
# Build Configuration Macro Definition
#
ARCH = AARCH64
TOOLCHAIN = GCC49
TOOLCHAIN_TAG = GCC49
TARGET = RELEASE

#
# Build Directory Macro Definition
#
# PLATFORM_BUILD_DIR = /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49
BUILD_DIR = /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49
BIN_DIR = $(BUILD_DIR)/AARCH64
LIB_DIR = $(BIN_DIR)
MODULE_BUILD_DIR = /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49/AARCH64/ArmPkg/Library/ArmMmuLib/ArmMmuBaseLib
OUTPUT_DIR = /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49/AARCH64/ArmPkg/Library/ArmMmuLib/ArmMmuBaseLib/OUTPUT
DEBUG_DIR = /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49/AARCH64/ArmPkg/Library/ArmMmuLib/ArmMmuBaseLib/DEBUG
DEST_DIR_OUTPUT = $(OUTPUT_DIR)
DEST_DIR_DEBUG = $(DEBUG_DIR)

#
# Shell Command Macro
#
RD = rm -r -f
RM = rm -f
MD = mkdir -p
CP = cp -f
MV = mv -f


#
# Tools definitions specific to this module
#

SYMRENAME = echo
SYMRENAME_FLAGS = Symbol renaming not needed for

ASLDLINK = /usr/bin/aarch64-linux-gnu-ld
ASLDLINK_FLAGS = -Ttext=0x0 --emit-relocs -nostdlib --gc-sections -u $(IMAGE_ENTRY_POINT) -e $(IMAGE_ENTRY_POINT) -Map $(DEST_DIR_DEBUG)/$(BASE_NAME).map --entry ReferenceAcpiTable -u $(IMAGE_ENTRY_POINT)


RSA2048SHA256SIGN = Rsa2048Sha256Sign
RSA2048SHA256SIGN_GUID =  A7717414-C616-4977-9420-844712A735BF


VFR = VfrCompile
VFR_FLAGS = -l -n

PP = /usr/bin/aarch64-linux-gnu-gcc
PP_FLAGS = $(ARCHCC_FLAGS) $(PLATFORM_FLAGS) -E -x assembler-with-cpp -include $(DEST_DIR_DEBUG)/AutoGen.h

LZMAF86 = LzmaF86Compress
LZMAF86_GUID =  D42AE6BD-1352-4bfb-909A-CA72A6EAE889



GENFW = GenFw
GENFW_FLAGS = 

OPTROM = EfiRom
OPTROM_FLAGS = -e

SLINK = /usr/bin/aarch64-linux-gnu-ar


PLATFORM_FLAGS = 

RC = /usr/bin/aarch64-linux-gnu-objcopy
RC_FLAGS = -I binary -O elf64-littleaarch64 -B aarch64 --rename-section .data=.hii


ASM = /usr/bin/aarch64-linux-gnu-gcc
ASM_FLAGS = $(ARCHASM_FLAGS) $(PLATFORM_FLAGS) -c -x assembler -imacros $(DEST_DIR_DEBUG)/AutoGen.h -mlittle-endian

ASL = iasl
ASL_FLAGS = 
ASL_OUTFLAGS =  -p


MTOC = /usr/local/bin/mtoc

CC = /usr/bin/aarch64-linux-gnu-gcc
CC_FLAGS = $(ARCHCC_FLAGS) $(PLATFORM_FLAGS) -g -fshort-wchar -fno-strict-aliasing -Wall -Werror -Wno-array-bounds -ffunction-sections -fdata-sections -c -include AutoGen.h -DSTRING_ARRAY_NAME=$(BASE_NAME)Strings -g -Os -fshort-wchar -fno-strict-aliasing -Wall -Werror -Wno-array-bounds -c -include AutoGen.h -mcmodel=large -mlittle-endian -fno-short-enums -save-temps -fverbose-asm -fsigned-char -ffunction-sections -fdata-sections -fomit-frame-pointer -fno-builtin -Wno-address -Wno-unused-but-set-variable -D DISABLE_NEW_DEPRECATED_INTERFACES

NASMB_FLAGS = -f bin

VFRPP = /usr/bin/aarch64-linux-gnu-gcc
VFRPP_FLAGS = $(ARCHCC_FLAGS) $(PLATFORM_FLAGS) -x c -E -P -DVFRCOMPILE --include $(DEST_DIR_DEBUG)/$(MODULE_NAME)StrDefs.h



LZMA = LzmaCompress
LZMA_GUID =  EE4E5898-3914-4259-9D6E-DC7BD79403CF


ASLCC = /usr/bin/aarch64-linux-gnu-gcc
ASLCC_FLAGS = -x c


MAKE = make


DLINK = /usr/bin/aarch64-linux-gnu-ld
DLINK_FLAGS = -Ttext=0x0 --emit-relocs -nostdlib --gc-sections -u $(IMAGE_ENTRY_POINT) -e $(IMAGE_ENTRY_POINT) -Map $(DEST_DIR_DEBUG)/$(BASE_NAME).map

TIANO = TianoCompress
TIANO_GUID =  A31280AD-481E-41B6-95E8-127F4C984779

VPDTOOL = BPDG
VPDTOOL_GUID =  8C3D856A-9BE6-468E-850A-24F7A8D38E08

CRC32 = GenCrc32
CRC32_GUID =  FC1BCDB0-7D31-49AA-936A-A4600D9DD083

ASLPP = /usr/bin/aarch64-linux-gnu-gcc
ASLPP_FLAGS = -x c -E -P

OBJCOPY_ADDDEBUGFLAG =  
OBJCOPY = echo
OBJCOPY_FLAGS = objcopy not needed for

APP_FLAGS = 

ASMLINK = C:\WINDDK\3790.1830\bin\bin16\link16.exe
ASMLINK_FLAGS = /nologo /tiny

NASM = nasm


MAKE_FILE = $(MODULE_BUILD_DIR)/GNUmakefile

#
# Build Macro
#
OBJECT_FILES =  \
    $(OUTPUT_DIR)/AArch64/ArmMmuLibCore.obj \
    $(OUTPUT_DIR)/AArch64/ArmMmuLibReplaceEntry.obj

INC =  \
    -I$(WORKSPACE)/ArmPkg/Library/ArmMmuLib/AArch64 \
    -I$(WORKSPACE)/ArmPkg/Library/ArmMmuLib \
    -I$(DEBUG_DIR) \
    -I$(WORKSPACE)/ArmPkg \
    -I$(WORKSPACE)/ArmPkg/Include \
    -I$(WORKSPACE)/EmbeddedPkg \
    -I$(WORKSPACE)/EmbeddedPkg/Include \
    -I$(WORKSPACE)/MdePkg \
    -I$(WORKSPACE)/MdePkg/Include \
    -I$(WORKSPACE)/MdePkg/Include/AArch64

OBJECT_FILES_LIST = /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49/AARCH64/ArmPkg/Library/ArmMmuLib/ArmMmuBaseLib/OUTPUT/object_files.lst


COMMON_DEPS = $(WORKSPACE)/MdePkg/Include/Library/BaseMemoryLib.h \
              $(WORKSPACE)/MdePkg/Include/IndustryStandard/Acpi40.h \
              $(WORKSPACE)/MdePkg/Include/IndustryStandard/AcpiAml.h \
              $(WORKSPACE)/MdePkg/Include/Base.h \
              $(WORKSPACE)/ArmPkg/Include/Chipset/ArmV7Mmu.h \
              $(DEBUG_DIR)/AutoGen.h \
              $(WORKSPACE)/MdePkg/Include/Uefi/UefiMultiPhase.h \
              $(WORKSPACE)/MdePkg/Include/Library/BaseLib.h \
              $(WORKSPACE)/MdePkg/Include/Uefi.h \
              $(WORKSPACE)/MdePkg/Include/Protocol/DevicePath.h \
              $(WORKSPACE)/MdePkg/Include/Uefi/UefiGpt.h \
              $(WORKSPACE)/ArmPkg/Include/Chipset/AArch64Mmu.h \
              $(WORKSPACE)/MdePkg/Include/Uefi/UefiInternalFormRepresentation.h \
              $(WORKSPACE)/MdePkg/Include/Guid/HiiFormMapMethodGuid.h \
              $(WORKSPACE)/MdePkg/Include/IndustryStandard/Acpi20.h \
              $(WORKSPACE)/MdePkg/Include/IndustryStandard/Acpi50.h \
              $(WORKSPACE)/ArmPkg/Include/Chipset/ArmV7.h \
              $(WORKSPACE)/MdePkg/Include/IndustryStandard/Acpi51.h \
              $(WORKSPACE)/MdePkg/Include/Guid/WinCertificate.h \
              $(WORKSPACE)/ArmPkg/Include/Library/ArmMmuLib.h \
              $(WORKSPACE)/MdePkg/Include/Library/DebugLib.h \
              $(WORKSPACE)/MdePkg/Include/IndustryStandard/Acpi10.h \
              $(WORKSPACE)/MdePkg/Include/Library/PcdLib.h \
              $(WORKSPACE)/ArmPkg/Include/Library/ArmLib.h \
              $(WORKSPACE)/MdePkg/Include/Protocol/SimpleTextOut.h \
              $(WORKSPACE)/MdePkg/Include/IndustryStandard/Bluetooth.h \
              $(WORKSPACE)/MdePkg/Include/Uefi/UefiSpec.h \
              $(WORKSPACE)/MdePkg/Include/AArch64/ProcessorBind.h \
              $(WORKSPACE)/MdePkg/Include/IndustryStandard/Acpi30.h \
              $(WORKSPACE)/MdePkg/Include/Protocol/SimpleTextInEx.h \
              $(WORKSPACE)/MdePkg/Include/Library/MemoryAllocationLib.h \
              $(WORKSPACE)/MdePkg/Include/Uefi/UefiBaseType.h \
              $(WORKSPACE)/MdePkg/Include/Uefi/UefiPxe.h \
              $(WORKSPACE)/MdePkg/Include/Protocol/SimpleTextIn.h \
              $(WORKSPACE)/MdePkg/Include/Library/CacheMaintenanceLib.h \
              $(WORKSPACE)/MdePkg/Include/IndustryStandard/Acpi60.h \
              $(WORKSPACE)/ArmPkg/Include/Chipset/AArch64.h \
              $(WORKSPACE)/MdePkg/Include/Guid/PcAnsi.h \
              

#
# Overridable Target Macro Definitions
#
FORCE_REBUILD = force_build
INIT_TARGET = init
PCH_TARGET =
BC_TARGET = 
CODA_TARGET = /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49/AARCH64/ArmPkg/Library/ArmMmuLib/ArmMmuBaseLib/OUTPUT/ArmMmuBaseLib.lib \
              

#
# Default target, which will build dependent libraries in addition to source files
#

all: mbuild


#
# Target used when called from platform makefile, which will bypass the build of dependent libraries
#

pbuild: $(INIT_TARGET) $(BC_TARGET) $(PCH_TARGET) $(CODA_TARGET)

#
# ModuleTarget
#

mbuild: $(INIT_TARGET) $(BC_TARGET) gen_libs $(PCH_TARGET) $(CODA_TARGET)

#
# Build Target used in multi-thread build mode, which will bypass the init and gen_libs targets
#

tbuild: $(BC_TARGET) $(PCH_TARGET) $(CODA_TARGET)

#
# Phony target which is used to force executing commands for a target
#
force_build:
	-@

#
# Target to update the FD
#

fds: mbuild gen_fds

#
# Initialization target: print build information and create necessary directories
#
init: info dirs

info:
	-@echo Building ... $(MODULE_DIR)/$(MODULE_FILE) [$(ARCH)]

dirs:
	-@$(MD) $(DEBUG_DIR)
	-@$(MD) $(OUTPUT_DIR)


strdefs:
	-@$(CP) $(DEBUG_DIR)/AutoGen.h $(DEBUG_DIR)/$(MODULE_NAME)StrDefs.h

#
# GenLibsTarget
#
gen_libs:
	@cd $(MODULE_BUILD_DIR)

#
# Build Flash Device Image
#
gen_fds:
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BUILD_DIR)/GNUmakefile fds
	@cd $(MODULE_BUILD_DIR)

#
# Individual Object Build Targets
#
$(OUTPUT_DIR)/ArmMmuBaseLib.lib : $(OBJECT_FILES)
$(OUTPUT_DIR)/ArmMmuBaseLib.lib : $(OBJECT_FILES_LIST)
	"$(SLINK)" -cr /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49/AARCH64/ArmPkg/Library/ArmMmuLib/ArmMmuBaseLib/OUTPUT/ArmMmuBaseLib.lib $(SLINK_FLAGS) @$(OBJECT_FILES_LIST)

$(OUTPUT_DIR)/AArch64/ArmMmuLibCore.obj : $(MAKE_FILE)
$(OUTPUT_DIR)/AArch64/ArmMmuLibCore.obj : $(COMMON_DEPS)
$(OUTPUT_DIR)/AArch64/ArmMmuLibCore.obj : $(WORKSPACE)/ArmPkg/Library/ArmMmuLib/AArch64/ArmMmuLibCore.c
	"$(CC)" $(CC_FLAGS) -o /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49/AARCH64/ArmPkg/Library/ArmMmuLib/ArmMmuBaseLib/OUTPUT/AArch64/ArmMmuLibCore.obj $(INC) /root/next-loader/src/edk2/UDK2018/MyWorkSpace/ArmPkg/Library/ArmMmuLib/AArch64/ArmMmuLibCore.c

$(OUTPUT_DIR)/AArch64/ArmMmuLibReplaceEntry.obj : $(MAKE_FILE)
$(OUTPUT_DIR)/AArch64/ArmMmuLibReplaceEntry.obj : $(WORKSPACE)/MdePkg/Include/Library/PcdLib.h
$(OUTPUT_DIR)/AArch64/ArmMmuLibReplaceEntry.obj : $(DEBUG_DIR)/AutoGen.h
$(OUTPUT_DIR)/AArch64/ArmMmuLibReplaceEntry.obj : $(WORKSPACE)/MdePkg/Include/AArch64/ProcessorBind.h
$(OUTPUT_DIR)/AArch64/ArmMmuLibReplaceEntry.obj : $(WORKSPACE)/ArmPkg/Include/AsmMacroIoLibV8.h
$(OUTPUT_DIR)/AArch64/ArmMmuLibReplaceEntry.obj : $(WORKSPACE)/MdePkg/Include/Base.h
$(OUTPUT_DIR)/AArch64/ArmMmuLibReplaceEntry.obj : $(WORKSPACE)/ArmPkg/Library/ArmMmuLib/AArch64/ArmMmuLibReplaceEntry.S
	"$(PP)" $(PP_FLAGS) $(INC) /root/next-loader/src/edk2/UDK2018/MyWorkSpace/ArmPkg/Library/ArmMmuLib/AArch64/ArmMmuLibReplaceEntry.S > /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49/AARCH64/ArmPkg/Library/ArmMmuLib/ArmMmuBaseLib/OUTPUT/AArch64/ArmMmuLibReplaceEntry.i
	Trim --trim-long --source-code -o /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49/AARCH64/ArmPkg/Library/ArmMmuLib/ArmMmuBaseLib/OUTPUT/AArch64/ArmMmuLibReplaceEntry.iii /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49/AARCH64/ArmPkg/Library/ArmMmuLib/ArmMmuBaseLib/OUTPUT/AArch64/ArmMmuLibReplaceEntry.i
	"$(ASM)" $(ASM_FLAGS) -o /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49/AARCH64/ArmPkg/Library/ArmMmuLib/ArmMmuBaseLib/OUTPUT/AArch64/ArmMmuLibReplaceEntry.obj $(INC) /root/next-loader/src/edk2/UDK2018/MyWorkSpace/Build/MdeModule/RELEASE_GCC49/AARCH64/ArmPkg/Library/ArmMmuLib/ArmMmuBaseLib/OUTPUT/AArch64/ArmMmuLibReplaceEntry.iii



#
# clean all intermediate files
#
clean:
	$(RD) $(OUTPUT_DIR)
		$(RM) AutoGenTimeStamp

#
# clean all generated files
#
cleanall:
	$(RD) $(DEBUG_DIR)
	$(RD) $(OUTPUT_DIR)
	$(RM) *.pdb *.idb > NUL 2>&1
	$(RM) $(BIN_DIR)/$(MODULE_NAME).efi
	$(RM) AutoGenTimeStamp

#
# clean all dependent libraries built
#
cleanlib:
	@cd $(MODULE_BUILD_DIR)

